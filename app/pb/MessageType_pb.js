/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var RichTextDef_pb = require('./RichTextDef_pb.js');
goog.exportSymbol('proto.MessageType.ErrorInfo', null, global);
goog.exportSymbol('proto.MessageType.IdInfo', null, global);
goog.exportSymbol('proto.MessageType.RichInfo', null, global);
goog.exportSymbol('proto.MessageType.TipsMsgId', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageType.ErrorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MessageType.ErrorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MessageType.ErrorInfo.displayName = 'proto.MessageType.ErrorInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageType.ErrorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageType.ErrorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageType.ErrorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageType.ErrorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    errCode: jspb.Message.getFieldWithDefault(msg, 1, 2147483648),
    errMsg: msg.getErrMsg_asB64(),
    errMsgRich: (f = msg.getErrMsgRich()) && RichTextDef_pb.RichTextBlock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageType.ErrorInfo}
 */
proto.MessageType.ErrorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageType.ErrorInfo;
  return proto.MessageType.ErrorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageType.ErrorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageType.ErrorInfo}
 */
proto.MessageType.ErrorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setErrCode(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErrMsg(value);
      break;
    case 3:
      var value = new RichTextDef_pb.RichTextBlock;
      reader.readMessage(value,RichTextDef_pb.RichTextBlock.deserializeBinaryFromReader);
      msg.setErrMsgRich(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageType.ErrorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageType.ErrorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageType.ErrorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageType.ErrorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getErrMsgRich();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      RichTextDef_pb.RichTextBlock.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 err_code = 1;
 * @return {number}
 */
proto.MessageType.ErrorInfo.prototype.getErrCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2147483648));
};


/** @param {number} value */
proto.MessageType.ErrorInfo.prototype.setErrCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MessageType.ErrorInfo.prototype.clearErrCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageType.ErrorInfo.prototype.hasErrCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes err_msg = 2;
 * @return {!(string|Uint8Array)}
 */
proto.MessageType.ErrorInfo.prototype.getErrMsg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes err_msg = 2;
 * This is a type-conversion wrapper around `getErrMsg()`
 * @return {string}
 */
proto.MessageType.ErrorInfo.prototype.getErrMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErrMsg()));
};


/**
 * optional bytes err_msg = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErrMsg()`
 * @return {!Uint8Array}
 */
proto.MessageType.ErrorInfo.prototype.getErrMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErrMsg()));
};


/** @param {!(string|Uint8Array)} value */
proto.MessageType.ErrorInfo.prototype.setErrMsg = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MessageType.ErrorInfo.prototype.clearErrMsg = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageType.ErrorInfo.prototype.hasErrMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RichTextDef.RichTextBlock err_msg_rich = 3;
 * @return {?proto.RichTextDef.RichTextBlock}
 */
proto.MessageType.ErrorInfo.prototype.getErrMsgRich = function() {
  return /** @type{?proto.RichTextDef.RichTextBlock} */ (
    jspb.Message.getWrapperField(this, RichTextDef_pb.RichTextBlock, 3));
};


/** @param {?proto.RichTextDef.RichTextBlock|undefined} value */
proto.MessageType.ErrorInfo.prototype.setErrMsgRich = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.MessageType.ErrorInfo.prototype.clearErrMsgRich = function() {
  this.setErrMsgRich(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageType.ErrorInfo.prototype.hasErrMsgRich = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageType.IdInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MessageType.IdInfo.repeatedFields_, null);
};
goog.inherits(proto.MessageType.IdInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MessageType.IdInfo.displayName = 'proto.MessageType.IdInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MessageType.IdInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageType.IdInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageType.IdInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageType.IdInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageType.IdInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64(),
    extraList: jspb.Message.toObjectList(msg.getExtraList(),
    proto.MessageType.RichInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageType.IdInfo}
 */
proto.MessageType.IdInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageType.IdInfo;
  return proto.MessageType.IdInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageType.IdInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageType.IdInfo}
 */
proto.MessageType.IdInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 2:
      var value = new proto.MessageType.RichInfo;
      reader.readMessage(value,proto.MessageType.RichInfo.deserializeBinaryFromReader);
      msg.addExtra(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageType.IdInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageType.IdInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageType.IdInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageType.IdInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getExtraList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MessageType.RichInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.MessageType.IdInfo.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.MessageType.IdInfo.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.MessageType.IdInfo.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.MessageType.IdInfo.prototype.setContent = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MessageType.IdInfo.prototype.clearContent = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageType.IdInfo.prototype.hasContent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RichInfo extra = 2;
 * @return {!Array.<!proto.MessageType.RichInfo>}
 */
proto.MessageType.IdInfo.prototype.getExtraList = function() {
  return /** @type{!Array.<!proto.MessageType.RichInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MessageType.RichInfo, 2));
};


/** @param {!Array.<!proto.MessageType.RichInfo>} value */
proto.MessageType.IdInfo.prototype.setExtraList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MessageType.RichInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MessageType.RichInfo}
 */
proto.MessageType.IdInfo.prototype.addExtra = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MessageType.RichInfo, opt_index);
};


proto.MessageType.IdInfo.prototype.clearExtraList = function() {
  this.setExtraList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageType.RichInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MessageType.RichInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MessageType.RichInfo.displayName = 'proto.MessageType.RichInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageType.RichInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageType.RichInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageType.RichInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageType.RichInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    begin: jspb.Message.getField(msg, 1),
    end: jspb.Message.getField(msg, 2),
    tag: jspb.Message.getField(msg, 3),
    tagId: jspb.Message.getField(msg, 4),
    tagExtra: msg.getTagExtra_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageType.RichInfo}
 */
proto.MessageType.RichInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageType.RichInfo;
  return proto.MessageType.RichInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageType.RichInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageType.RichInfo}
 */
proto.MessageType.RichInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBegin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnd(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTag(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTagId(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTagExtra(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageType.RichInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageType.RichInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageType.RichInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageType.RichInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * required int32 begin = 1;
 * @return {number}
 */
proto.MessageType.RichInfo.prototype.getBegin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MessageType.RichInfo.prototype.setBegin = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MessageType.RichInfo.prototype.clearBegin = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageType.RichInfo.prototype.hasBegin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 end = 2;
 * @return {number}
 */
proto.MessageType.RichInfo.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MessageType.RichInfo.prototype.setEnd = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MessageType.RichInfo.prototype.clearEnd = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageType.RichInfo.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 tag = 3;
 * @return {number}
 */
proto.MessageType.RichInfo.prototype.getTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MessageType.RichInfo.prototype.setTag = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MessageType.RichInfo.prototype.clearTag = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageType.RichInfo.prototype.hasTag = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 tag_id = 4;
 * @return {number}
 */
proto.MessageType.RichInfo.prototype.getTagId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MessageType.RichInfo.prototype.setTagId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MessageType.RichInfo.prototype.clearTagId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageType.RichInfo.prototype.hasTagId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes tag_extra = 5;
 * @return {!(string|Uint8Array)}
 */
proto.MessageType.RichInfo.prototype.getTagExtra = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes tag_extra = 5;
 * This is a type-conversion wrapper around `getTagExtra()`
 * @return {string}
 */
proto.MessageType.RichInfo.prototype.getTagExtra_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTagExtra()));
};


/**
 * optional bytes tag_extra = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTagExtra()`
 * @return {!Uint8Array}
 */
proto.MessageType.RichInfo.prototype.getTagExtra_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTagExtra()));
};


/** @param {!(string|Uint8Array)} value */
proto.MessageType.RichInfo.prototype.setTagExtra = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MessageType.RichInfo.prototype.clearTagExtra = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageType.RichInfo.prototype.hasTagExtra = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageType.TipsMsgId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MessageType.TipsMsgId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MessageType.TipsMsgId.displayName = 'proto.MessageType.TipsMsgId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageType.TipsMsgId.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageType.TipsMsgId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageType.TipsMsgId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageType.TipsMsgId.toObject = function(includeInstance, msg) {
  var f, obj = {
    tipstype: jspb.Message.getField(msg, 1),
    placeid: jspb.Message.getField(msg, 2),
    tipcontent: msg.getTipcontent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageType.TipsMsgId}
 */
proto.MessageType.TipsMsgId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageType.TipsMsgId;
  return proto.MessageType.TipsMsgId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageType.TipsMsgId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageType.TipsMsgId}
 */
proto.MessageType.TipsMsgId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTipstype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlaceid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTipcontent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageType.TipsMsgId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageType.TipsMsgId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageType.TipsMsgId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageType.TipsMsgId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * required int32 tipsType = 1;
 * @return {number}
 */
proto.MessageType.TipsMsgId.prototype.getTipstype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MessageType.TipsMsgId.prototype.setTipstype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MessageType.TipsMsgId.prototype.clearTipstype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageType.TipsMsgId.prototype.hasTipstype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 placeId = 2;
 * @return {number}
 */
proto.MessageType.TipsMsgId.prototype.getPlaceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MessageType.TipsMsgId.prototype.setPlaceid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MessageType.TipsMsgId.prototype.clearPlaceid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageType.TipsMsgId.prototype.hasPlaceid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes tipContent = 3;
 * @return {!(string|Uint8Array)}
 */
proto.MessageType.TipsMsgId.prototype.getTipcontent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes tipContent = 3;
 * This is a type-conversion wrapper around `getTipcontent()`
 * @return {string}
 */
proto.MessageType.TipsMsgId.prototype.getTipcontent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTipcontent()));
};


/**
 * optional bytes tipContent = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTipcontent()`
 * @return {!Uint8Array}
 */
proto.MessageType.TipsMsgId.prototype.getTipcontent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTipcontent()));
};


/** @param {!(string|Uint8Array)} value */
proto.MessageType.TipsMsgId.prototype.setTipcontent = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MessageType.TipsMsgId.prototype.clearTipcontent = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageType.TipsMsgId.prototype.hasTipcontent = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.MessageType);
